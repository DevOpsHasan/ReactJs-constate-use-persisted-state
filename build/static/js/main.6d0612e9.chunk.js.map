{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useCounterState","createPersistedState","constate","count","setCount","increment","prevCount","decrement","reset","CounterProvider","useCounterContext","ButtonIncrement","onClick","ButtonDecrement","ButtonReset","Count","useEffect","document","title","App","AppWithCounter","props","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","initialIsOpen","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4NAKMA,EAAkBC,YAAqB,W,MAiBOC,aAdpD,WAAsB,MAEMF,EAAgB,GAFtB,mBAEbG,EAFa,KAENC,EAFM,KAUpB,MAAO,CAAED,QAAOE,UANE,kBAAMD,GAAS,SAACE,GAAD,OAAeA,EAAY,MAMjCC,UAJT,kBAAMH,GAAS,SAACE,GAAD,OAAeA,EAAY,MAItBE,MAFxB,kBAAMJ,EAAS,Q,mBAMjBK,E,KAAiBC,E,KAE/B,SAASC,IAAkB,IAEjBN,EAAcK,IAAdL,UACR,OAAO,4BAAQO,QAASP,GAAjB,KAGT,SAASQ,IAAkB,IAEjBN,EAAcG,IAAdH,UACR,OAAO,4BAAQK,QAASL,GAAjB,KAGT,SAASO,IAAc,IAEbN,EAAUE,IAAVF,MACR,OAAO,4BAAQI,QAASJ,GAAjB,KAGT,SAASO,IAAQ,IAEPZ,EAAUO,IAAVP,MAOR,OALAa,qBAAU,WAERC,SAASC,MAAQf,IAChB,CAACA,IAEG,8BAAOA,GAGhB,SAASgB,IACP,OACE,oCAEE,kBAACJ,EAAD,MACA,kBAACJ,EAAD,MACA,kBAACE,EAAD,MACA,kBAACC,EAAD,OAKS,SAASM,EAAeC,GACrC,OAEE,kBAACZ,EAAD,KACE,kBAACU,EAAQE,IC1DKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,qBAAD,CAAoBC,eAAe,KAErCb,SAASc,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6d0612e9.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport constate from \"constate\";\nimport createPersistedState from \"use-persisted-state\";\n\n// Create a Persisted State\nconst useCounterState = createPersistedState(\"Counter\");\n\n// Create a custom hook\nfunction useCounter() {\n  // set Persisted State insteed of useState\n  const [count, setCount] = useCounterState(0);\n\n  const increment = () => setCount((prevCount) => prevCount + 1);\n\n  const decrement = () => setCount((prevCount) => prevCount - 1);\n\n  const reset = () => setCount(0);\n\n  return { count, increment, decrement, reset };\n}\n\n// create store with custom hook\nexport const [CounterProvider, useCounterContext] = constate(useCounter);\n\nfunction ButtonIncrement() {\n  // Use context instead of custom hook for increment\n  const { increment } = useCounterContext();\n  return <button onClick={increment}>+</button>;\n}\n\nfunction ButtonDecrement() {\n  // Use context instead of custom hook for decrement\n  const { decrement } = useCounterContext();\n  return <button onClick={decrement}>-</button>;\n}\n\nfunction ButtonReset() {\n  // Use context instead of custom hook for reset\n  const { reset } = useCounterContext();\n  return <button onClick={reset}>0</button>;\n}\n\nfunction Count() {\n  // Use context instead of custom hook for count\n  const { count } = useCounterContext();\n\n  useEffect(() => {\n    // display document title for every count value change\n    document.title = count;\n  }, [count]);\n\n  return <span>{count}</span>;\n}\n\nfunction App() {\n  return (\n    <>\n      {/* display components */}\n      <Count />\n      <ButtonIncrement />\n      <ButtonDecrement />\n      <ButtonReset />\n    </>\n  );\n}\n\nexport default function AppWithCounter(props) {\n  return (\n    // warp App component with store provider\n    <CounterProvider>\n      <App {...props} />\n    </CounterProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ReactQueryDevtools } from \"react-query-devtools\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <ReactQueryDevtools initialIsOpen={false} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}